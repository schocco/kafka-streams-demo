/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package demo.kstreams;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class StockTick extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7884936501605798610L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"StockTick\",\"namespace\":\"demo.kstreams\",\"fields\":[{\"name\":\"Symbol\",\"type\":\"string\"},{\"name\":\"Date\",\"type\":{\"type\":\"long\",\"connect.version\":1,\"connect.name\":\"org.apache.kafka.connect.data.Timestamp\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"Open\",\"type\":{\"type\":\"bytes\",\"scale\":3,\"precision\":64,\"connect.parameters\":{\"scale\":\"3\"},\"connect.name\":\"org.apache.kafka.connect.data.Decimal\",\"logicalType\":\"decimal\"}},{\"name\":\"High\",\"type\":{\"type\":\"bytes\",\"scale\":3,\"precision\":64,\"connect.parameters\":{\"scale\":\"3\"},\"connect.name\":\"org.apache.kafka.connect.data.Decimal\",\"logicalType\":\"decimal\"}},{\"name\":\"Low\",\"type\":{\"type\":\"bytes\",\"scale\":3,\"precision\":64,\"connect.parameters\":{\"scale\":\"3\"},\"connect.name\":\"org.apache.kafka.connect.data.Decimal\",\"logicalType\":\"decimal\"}},{\"name\":\"Close\",\"type\":{\"type\":\"bytes\",\"scale\":3,\"precision\":64,\"connect.parameters\":{\"scale\":\"3\"},\"connect.name\":\"org.apache.kafka.connect.data.Decimal\",\"logicalType\":\"decimal\"}},{\"name\":\"Volume\",\"type\":{\"type\":\"bytes\",\"scale\":0,\"precision\":64,\"connect.parameters\":{\"scale\":\"0\"},\"connect.name\":\"org.apache.kafka.connect.data.Decimal\",\"logicalType\":\"decimal\"}},{\"name\":\"OpenInt\",\"type\":[\"null\",\"int\"],\"default\":null}],\"connect.name\":\"StockTick\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<StockTick> ENCODER =
      new BinaryMessageEncoder<StockTick>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<StockTick> DECODER =
      new BinaryMessageDecoder<StockTick>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<StockTick> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<StockTick> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<StockTick>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this StockTick to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a StockTick from a ByteBuffer. */
  public static StockTick fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence Symbol;
  @Deprecated public org.joda.time.DateTime Date;
  @Deprecated public java.nio.ByteBuffer Open;
  @Deprecated public java.nio.ByteBuffer High;
  @Deprecated public java.nio.ByteBuffer Low;
  @Deprecated public java.nio.ByteBuffer Close;
  @Deprecated public java.nio.ByteBuffer Volume;
  @Deprecated public java.lang.Integer OpenInt;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public StockTick() {}

  /**
   * All-args constructor.
   * @param Symbol The new value for Symbol
   * @param Date The new value for Date
   * @param Open The new value for Open
   * @param High The new value for High
   * @param Low The new value for Low
   * @param Close The new value for Close
   * @param Volume The new value for Volume
   * @param OpenInt The new value for OpenInt
   */
  public StockTick(java.lang.CharSequence Symbol, org.joda.time.DateTime Date, java.nio.ByteBuffer Open, java.nio.ByteBuffer High, java.nio.ByteBuffer Low, java.nio.ByteBuffer Close, java.nio.ByteBuffer Volume, java.lang.Integer OpenInt) {
    this.Symbol = Symbol;
    this.Date = Date;
    this.Open = Open;
    this.High = High;
    this.Low = Low;
    this.Close = Close;
    this.Volume = Volume;
    this.OpenInt = OpenInt;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return Symbol;
    case 1: return Date;
    case 2: return Open;
    case 3: return High;
    case 4: return Low;
    case 5: return Close;
    case 6: return Volume;
    case 7: return OpenInt;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  protected static final org.apache.avro.data.TimeConversions.DateConversion DATE_CONVERSION = new org.apache.avro.data.TimeConversions.DateConversion();
  protected static final org.apache.avro.data.TimeConversions.TimeConversion TIME_CONVERSION = new org.apache.avro.data.TimeConversions.TimeConversion();
  protected static final org.apache.avro.data.TimeConversions.TimestampConversion TIMESTAMP_CONVERSION = new org.apache.avro.data.TimeConversions.TimestampConversion();
  protected static final org.apache.avro.Conversions.DecimalConversion DECIMAL_CONVERSION = new org.apache.avro.Conversions.DecimalConversion();

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      TIMESTAMP_CONVERSION,
      null,
      null,
      null,
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: Symbol = (java.lang.CharSequence)value$; break;
    case 1: Date = (org.joda.time.DateTime)value$; break;
    case 2: Open = (java.nio.ByteBuffer)value$; break;
    case 3: High = (java.nio.ByteBuffer)value$; break;
    case 4: Low = (java.nio.ByteBuffer)value$; break;
    case 5: Close = (java.nio.ByteBuffer)value$; break;
    case 6: Volume = (java.nio.ByteBuffer)value$; break;
    case 7: OpenInt = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'Symbol' field.
   * @return The value of the 'Symbol' field.
   */
  public java.lang.CharSequence getSymbol() {
    return Symbol;
  }

  /**
   * Sets the value of the 'Symbol' field.
   * @param value the value to set.
   */
  public void setSymbol(java.lang.CharSequence value) {
    this.Symbol = value;
  }

  /**
   * Gets the value of the 'Date' field.
   * @return The value of the 'Date' field.
   */
  public org.joda.time.DateTime getDate() {
    return Date;
  }

  /**
   * Sets the value of the 'Date' field.
   * @param value the value to set.
   */
  public void setDate(org.joda.time.DateTime value) {
    this.Date = value;
  }

  /**
   * Gets the value of the 'Open' field.
   * @return The value of the 'Open' field.
   */
  public java.nio.ByteBuffer getOpen() {
    return Open;
  }

  /**
   * Sets the value of the 'Open' field.
   * @param value the value to set.
   */
  public void setOpen(java.nio.ByteBuffer value) {
    this.Open = value;
  }

  /**
   * Gets the value of the 'High' field.
   * @return The value of the 'High' field.
   */
  public java.nio.ByteBuffer getHigh() {
    return High;
  }

  /**
   * Sets the value of the 'High' field.
   * @param value the value to set.
   */
  public void setHigh(java.nio.ByteBuffer value) {
    this.High = value;
  }

  /**
   * Gets the value of the 'Low' field.
   * @return The value of the 'Low' field.
   */
  public java.nio.ByteBuffer getLow() {
    return Low;
  }

  /**
   * Sets the value of the 'Low' field.
   * @param value the value to set.
   */
  public void setLow(java.nio.ByteBuffer value) {
    this.Low = value;
  }

  /**
   * Gets the value of the 'Close' field.
   * @return The value of the 'Close' field.
   */
  public java.nio.ByteBuffer getClose() {
    return Close;
  }

  /**
   * Sets the value of the 'Close' field.
   * @param value the value to set.
   */
  public void setClose(java.nio.ByteBuffer value) {
    this.Close = value;
  }

  /**
   * Gets the value of the 'Volume' field.
   * @return The value of the 'Volume' field.
   */
  public java.nio.ByteBuffer getVolume() {
    return Volume;
  }

  /**
   * Sets the value of the 'Volume' field.
   * @param value the value to set.
   */
  public void setVolume(java.nio.ByteBuffer value) {
    this.Volume = value;
  }

  /**
   * Gets the value of the 'OpenInt' field.
   * @return The value of the 'OpenInt' field.
   */
  public java.lang.Integer getOpenInt() {
    return OpenInt;
  }

  /**
   * Sets the value of the 'OpenInt' field.
   * @param value the value to set.
   */
  public void setOpenInt(java.lang.Integer value) {
    this.OpenInt = value;
  }

  /**
   * Creates a new StockTick RecordBuilder.
   * @return A new StockTick RecordBuilder
   */
  public static StockTick.Builder newBuilder() {
    return new StockTick.Builder();
  }

  /**
   * Creates a new StockTick RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new StockTick RecordBuilder
   */
  public static StockTick.Builder newBuilder(StockTick.Builder other) {
    return new StockTick.Builder(other);
  }

  /**
   * Creates a new StockTick RecordBuilder by copying an existing StockTick instance.
   * @param other The existing instance to copy.
   * @return A new StockTick RecordBuilder
   */
  public static StockTick.Builder newBuilder(StockTick other) {
    return new StockTick.Builder(other);
  }

  /**
   * RecordBuilder for StockTick instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<StockTick>
    implements org.apache.avro.data.RecordBuilder<StockTick> {

    private java.lang.CharSequence Symbol;
    private org.joda.time.DateTime Date;
    private java.nio.ByteBuffer Open;
    private java.nio.ByteBuffer High;
    private java.nio.ByteBuffer Low;
    private java.nio.ByteBuffer Close;
    private java.nio.ByteBuffer Volume;
    private java.lang.Integer OpenInt;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(StockTick.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.Symbol)) {
        this.Symbol = data().deepCopy(fields()[0].schema(), other.Symbol);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Date)) {
        this.Date = data().deepCopy(fields()[1].schema(), other.Date);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.Open)) {
        this.Open = data().deepCopy(fields()[2].schema(), other.Open);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.High)) {
        this.High = data().deepCopy(fields()[3].schema(), other.High);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.Low)) {
        this.Low = data().deepCopy(fields()[4].schema(), other.Low);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.Close)) {
        this.Close = data().deepCopy(fields()[5].schema(), other.Close);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.Volume)) {
        this.Volume = data().deepCopy(fields()[6].schema(), other.Volume);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.OpenInt)) {
        this.OpenInt = data().deepCopy(fields()[7].schema(), other.OpenInt);
        fieldSetFlags()[7] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing StockTick instance
     * @param other The existing instance to copy.
     */
    private Builder(StockTick other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.Symbol)) {
        this.Symbol = data().deepCopy(fields()[0].schema(), other.Symbol);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Date)) {
        this.Date = data().deepCopy(fields()[1].schema(), other.Date);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.Open)) {
        this.Open = data().deepCopy(fields()[2].schema(), other.Open);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.High)) {
        this.High = data().deepCopy(fields()[3].schema(), other.High);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.Low)) {
        this.Low = data().deepCopy(fields()[4].schema(), other.Low);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.Close)) {
        this.Close = data().deepCopy(fields()[5].schema(), other.Close);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.Volume)) {
        this.Volume = data().deepCopy(fields()[6].schema(), other.Volume);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.OpenInt)) {
        this.OpenInt = data().deepCopy(fields()[7].schema(), other.OpenInt);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'Symbol' field.
      * @return The value.
      */
    public java.lang.CharSequence getSymbol() {
      return Symbol;
    }

    /**
      * Sets the value of the 'Symbol' field.
      * @param value The value of 'Symbol'.
      * @return This builder.
      */
    public StockTick.Builder setSymbol(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.Symbol = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'Symbol' field has been set.
      * @return True if the 'Symbol' field has been set, false otherwise.
      */
    public boolean hasSymbol() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'Symbol' field.
      * @return This builder.
      */
    public StockTick.Builder clearSymbol() {
      Symbol = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'Date' field.
      * @return The value.
      */
    public org.joda.time.DateTime getDate() {
      return Date;
    }

    /**
      * Sets the value of the 'Date' field.
      * @param value The value of 'Date'.
      * @return This builder.
      */
    public StockTick.Builder setDate(org.joda.time.DateTime value) {
      validate(fields()[1], value);
      this.Date = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'Date' field has been set.
      * @return True if the 'Date' field has been set, false otherwise.
      */
    public boolean hasDate() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'Date' field.
      * @return This builder.
      */
    public StockTick.Builder clearDate() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'Open' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getOpen() {
      return Open;
    }

    /**
      * Sets the value of the 'Open' field.
      * @param value The value of 'Open'.
      * @return This builder.
      */
    public StockTick.Builder setOpen(java.nio.ByteBuffer value) {
      validate(fields()[2], value);
      this.Open = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'Open' field has been set.
      * @return True if the 'Open' field has been set, false otherwise.
      */
    public boolean hasOpen() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'Open' field.
      * @return This builder.
      */
    public StockTick.Builder clearOpen() {
      Open = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'High' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getHigh() {
      return High;
    }

    /**
      * Sets the value of the 'High' field.
      * @param value The value of 'High'.
      * @return This builder.
      */
    public StockTick.Builder setHigh(java.nio.ByteBuffer value) {
      validate(fields()[3], value);
      this.High = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'High' field has been set.
      * @return True if the 'High' field has been set, false otherwise.
      */
    public boolean hasHigh() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'High' field.
      * @return This builder.
      */
    public StockTick.Builder clearHigh() {
      High = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'Low' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getLow() {
      return Low;
    }

    /**
      * Sets the value of the 'Low' field.
      * @param value The value of 'Low'.
      * @return This builder.
      */
    public StockTick.Builder setLow(java.nio.ByteBuffer value) {
      validate(fields()[4], value);
      this.Low = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'Low' field has been set.
      * @return True if the 'Low' field has been set, false otherwise.
      */
    public boolean hasLow() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'Low' field.
      * @return This builder.
      */
    public StockTick.Builder clearLow() {
      Low = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'Close' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getClose() {
      return Close;
    }

    /**
      * Sets the value of the 'Close' field.
      * @param value The value of 'Close'.
      * @return This builder.
      */
    public StockTick.Builder setClose(java.nio.ByteBuffer value) {
      validate(fields()[5], value);
      this.Close = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'Close' field has been set.
      * @return True if the 'Close' field has been set, false otherwise.
      */
    public boolean hasClose() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'Close' field.
      * @return This builder.
      */
    public StockTick.Builder clearClose() {
      Close = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'Volume' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getVolume() {
      return Volume;
    }

    /**
      * Sets the value of the 'Volume' field.
      * @param value The value of 'Volume'.
      * @return This builder.
      */
    public StockTick.Builder setVolume(java.nio.ByteBuffer value) {
      validate(fields()[6], value);
      this.Volume = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'Volume' field has been set.
      * @return True if the 'Volume' field has been set, false otherwise.
      */
    public boolean hasVolume() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'Volume' field.
      * @return This builder.
      */
    public StockTick.Builder clearVolume() {
      Volume = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'OpenInt' field.
      * @return The value.
      */
    public java.lang.Integer getOpenInt() {
      return OpenInt;
    }

    /**
      * Sets the value of the 'OpenInt' field.
      * @param value The value of 'OpenInt'.
      * @return This builder.
      */
    public StockTick.Builder setOpenInt(java.lang.Integer value) {
      validate(fields()[7], value);
      this.OpenInt = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'OpenInt' field has been set.
      * @return True if the 'OpenInt' field has been set, false otherwise.
      */
    public boolean hasOpenInt() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'OpenInt' field.
      * @return This builder.
      */
    public StockTick.Builder clearOpenInt() {
      OpenInt = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public StockTick build() {
      try {
        StockTick record = new StockTick();
        record.Symbol = fieldSetFlags()[0] ? this.Symbol : (java.lang.CharSequence) defaultValue(fields()[0], record.getConversion(0));
        record.Date = fieldSetFlags()[1] ? this.Date : (org.joda.time.DateTime) defaultValue(fields()[1], record.getConversion(1));
        record.Open = fieldSetFlags()[2] ? this.Open : (java.nio.ByteBuffer) defaultValue(fields()[2], record.getConversion(2));
        record.High = fieldSetFlags()[3] ? this.High : (java.nio.ByteBuffer) defaultValue(fields()[3], record.getConversion(3));
        record.Low = fieldSetFlags()[4] ? this.Low : (java.nio.ByteBuffer) defaultValue(fields()[4], record.getConversion(4));
        record.Close = fieldSetFlags()[5] ? this.Close : (java.nio.ByteBuffer) defaultValue(fields()[5], record.getConversion(5));
        record.Volume = fieldSetFlags()[6] ? this.Volume : (java.nio.ByteBuffer) defaultValue(fields()[6], record.getConversion(6));
        record.OpenInt = fieldSetFlags()[7] ? this.OpenInt : (java.lang.Integer) defaultValue(fields()[7], record.getConversion(7));
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<StockTick>
    WRITER$ = (org.apache.avro.io.DatumWriter<StockTick>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<StockTick>
    READER$ = (org.apache.avro.io.DatumReader<StockTick>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
