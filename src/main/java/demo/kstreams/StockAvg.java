/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package demo.kstreams;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class StockAvg extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 243360036101376849L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"StockAvg\",\"namespace\":\"demo.kstreams\",\"fields\":[{\"name\":\"Symbol\",\"type\":\"string\"},{\"name\":\"Date\",\"type\":{\"type\":\"long\",\"connect.version\":1,\"connect.name\":\"org.apache.kafka.connect.data.Timestamp\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"avg10days\",\"type\":{\"type\":\"bytes\",\"scale\":3,\"precision\":64,\"connect.parameters\":{\"scale\":\"3\"},\"connect.name\":\"org.apache.kafka.connect.data.Decimal\",\"logicalType\":\"decimal\"}}],\"connect.name\":\"demo.kstreams.StockAvg\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<StockAvg> ENCODER =
      new BinaryMessageEncoder<StockAvg>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<StockAvg> DECODER =
      new BinaryMessageDecoder<StockAvg>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<StockAvg> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<StockAvg> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<StockAvg>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this StockAvg to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a StockAvg from a ByteBuffer. */
  public static StockAvg fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence Symbol;
  @Deprecated public org.joda.time.DateTime Date;
  @Deprecated public java.nio.ByteBuffer avg10days;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public StockAvg() {}

  /**
   * All-args constructor.
   * @param Symbol The new value for Symbol
   * @param Date The new value for Date
   * @param avg10days The new value for avg10days
   */
  public StockAvg(java.lang.CharSequence Symbol, org.joda.time.DateTime Date, java.nio.ByteBuffer avg10days) {
    this.Symbol = Symbol;
    this.Date = Date;
    this.avg10days = avg10days;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return Symbol;
    case 1: return Date;
    case 2: return avg10days;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  protected static final org.apache.avro.data.TimeConversions.DateConversion DATE_CONVERSION = new org.apache.avro.data.TimeConversions.DateConversion();
  protected static final org.apache.avro.data.TimeConversions.TimeConversion TIME_CONVERSION = new org.apache.avro.data.TimeConversions.TimeConversion();
  protected static final org.apache.avro.data.TimeConversions.TimestampConversion TIMESTAMP_CONVERSION = new org.apache.avro.data.TimeConversions.TimestampConversion();
  protected static final org.apache.avro.Conversions.DecimalConversion DECIMAL_CONVERSION = new org.apache.avro.Conversions.DecimalConversion();

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      TIMESTAMP_CONVERSION,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: Symbol = (java.lang.CharSequence)value$; break;
    case 1: Date = (org.joda.time.DateTime)value$; break;
    case 2: avg10days = (java.nio.ByteBuffer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'Symbol' field.
   * @return The value of the 'Symbol' field.
   */
  public java.lang.CharSequence getSymbol() {
    return Symbol;
  }

  /**
   * Sets the value of the 'Symbol' field.
   * @param value the value to set.
   */
  public void setSymbol(java.lang.CharSequence value) {
    this.Symbol = value;
  }

  /**
   * Gets the value of the 'Date' field.
   * @return The value of the 'Date' field.
   */
  public org.joda.time.DateTime getDate() {
    return Date;
  }

  /**
   * Sets the value of the 'Date' field.
   * @param value the value to set.
   */
  public void setDate(org.joda.time.DateTime value) {
    this.Date = value;
  }

  /**
   * Gets the value of the 'avg10days' field.
   * @return The value of the 'avg10days' field.
   */
  public java.nio.ByteBuffer getAvg10days() {
    return avg10days;
  }

  /**
   * Sets the value of the 'avg10days' field.
   * @param value the value to set.
   */
  public void setAvg10days(java.nio.ByteBuffer value) {
    this.avg10days = value;
  }

  /**
   * Creates a new StockAvg RecordBuilder.
   * @return A new StockAvg RecordBuilder
   */
  public static demo.kstreams.StockAvg.Builder newBuilder() {
    return new demo.kstreams.StockAvg.Builder();
  }

  /**
   * Creates a new StockAvg RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new StockAvg RecordBuilder
   */
  public static demo.kstreams.StockAvg.Builder newBuilder(demo.kstreams.StockAvg.Builder other) {
    return new demo.kstreams.StockAvg.Builder(other);
  }

  /**
   * Creates a new StockAvg RecordBuilder by copying an existing StockAvg instance.
   * @param other The existing instance to copy.
   * @return A new StockAvg RecordBuilder
   */
  public static demo.kstreams.StockAvg.Builder newBuilder(demo.kstreams.StockAvg other) {
    return new demo.kstreams.StockAvg.Builder(other);
  }

  /**
   * RecordBuilder for StockAvg instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<StockAvg>
    implements org.apache.avro.data.RecordBuilder<StockAvg> {

    private java.lang.CharSequence Symbol;
    private org.joda.time.DateTime Date;
    private java.nio.ByteBuffer avg10days;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(demo.kstreams.StockAvg.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.Symbol)) {
        this.Symbol = data().deepCopy(fields()[0].schema(), other.Symbol);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Date)) {
        this.Date = data().deepCopy(fields()[1].schema(), other.Date);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.avg10days)) {
        this.avg10days = data().deepCopy(fields()[2].schema(), other.avg10days);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing StockAvg instance
     * @param other The existing instance to copy.
     */
    private Builder(demo.kstreams.StockAvg other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.Symbol)) {
        this.Symbol = data().deepCopy(fields()[0].schema(), other.Symbol);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Date)) {
        this.Date = data().deepCopy(fields()[1].schema(), other.Date);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.avg10days)) {
        this.avg10days = data().deepCopy(fields()[2].schema(), other.avg10days);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'Symbol' field.
      * @return The value.
      */
    public java.lang.CharSequence getSymbol() {
      return Symbol;
    }

    /**
      * Sets the value of the 'Symbol' field.
      * @param value The value of 'Symbol'.
      * @return This builder.
      */
    public demo.kstreams.StockAvg.Builder setSymbol(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.Symbol = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'Symbol' field has been set.
      * @return True if the 'Symbol' field has been set, false otherwise.
      */
    public boolean hasSymbol() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'Symbol' field.
      * @return This builder.
      */
    public demo.kstreams.StockAvg.Builder clearSymbol() {
      Symbol = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'Date' field.
      * @return The value.
      */
    public org.joda.time.DateTime getDate() {
      return Date;
    }

    /**
      * Sets the value of the 'Date' field.
      * @param value The value of 'Date'.
      * @return This builder.
      */
    public demo.kstreams.StockAvg.Builder setDate(org.joda.time.DateTime value) {
      validate(fields()[1], value);
      this.Date = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'Date' field has been set.
      * @return True if the 'Date' field has been set, false otherwise.
      */
    public boolean hasDate() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'Date' field.
      * @return This builder.
      */
    public demo.kstreams.StockAvg.Builder clearDate() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'avg10days' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getAvg10days() {
      return avg10days;
    }

    /**
      * Sets the value of the 'avg10days' field.
      * @param value The value of 'avg10days'.
      * @return This builder.
      */
    public demo.kstreams.StockAvg.Builder setAvg10days(java.nio.ByteBuffer value) {
      validate(fields()[2], value);
      this.avg10days = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'avg10days' field has been set.
      * @return True if the 'avg10days' field has been set, false otherwise.
      */
    public boolean hasAvg10days() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'avg10days' field.
      * @return This builder.
      */
    public demo.kstreams.StockAvg.Builder clearAvg10days() {
      avg10days = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public StockAvg build() {
      try {
        StockAvg record = new StockAvg();
        record.Symbol = fieldSetFlags()[0] ? this.Symbol : (java.lang.CharSequence) defaultValue(fields()[0], record.getConversion(0));
        record.Date = fieldSetFlags()[1] ? this.Date : (org.joda.time.DateTime) defaultValue(fields()[1], record.getConversion(1));
        record.avg10days = fieldSetFlags()[2] ? this.avg10days : (java.nio.ByteBuffer) defaultValue(fields()[2], record.getConversion(2));
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<StockAvg>
    WRITER$ = (org.apache.avro.io.DatumWriter<StockAvg>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<StockAvg>
    READER$ = (org.apache.avro.io.DatumReader<StockAvg>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
